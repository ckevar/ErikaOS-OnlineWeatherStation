/*
 * Author: 2024 C. Alvarado.
 *
 */

CPU mySystem {

	OS myOs {

		EE_OPT = "DEBUG";
		EE_OPT = "__KEIL_USE_AXF_EXT__";
		
		
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			COMPILER_TYPE = GNU;
			MULTI_STACK = FALSE;
		};

		EE_OPT = "__USE_SYSTICK__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { NAME = "STM32F4XX_SPD"; 
			STM32F4XX_SPD = ENABLE {
                		USEUSART = TRUE;
                		USEMISC = TRUE;
						USEI2C = TRUE;
                		USEDMA = TRUE;
            		};
		};
		
		LIB = ENABLE {
			NAME = "STM32F4_DISCOVERY";
			STM32F4_DISCOVERY = ENABLE {
                USELEDS = TRUE;
                USELCD = TRUE;
                USELCDLOG = TRUE;
                USECOM = TRUE;
			};			
		};

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = FP;

	};
 	
	COUNTER myCounter;

	/******* NETWORK FSM *******/
	ALARM NETWORK_ALARM {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK {
			TASK = NETWORK;
		};
	};

	TASK NETWORK {
		PRIORITY = 0x02;   /* High priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	/******* Interface for the ESP8266 *******/
	ALARM ESP8266_POLL_ALARM {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK {
			TASK = ESP8266_POLL;
		};
	};
	
	TASK ESP8266_POLL {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	/******* Touch *******/
	ALARM LCD_IN_ALARM {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK {
			TASK = LCD_IN;
		};
	};

	TASK LCD_IN {
		PRIORITY = 0x03;   /* High priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	/******* Weather *******/
	ALARM WEATHER_UPDATE_ALARM {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK {
			TASK = WEATHER_UPDATE;
		};
	};

	TASK WEATHER_UPDATE {
		PRIORITY = 0x01;	/* Low Priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/******* Spotify *******/
	ALARM SPOTIFY_UPDATE_ALARM {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK {
			TASK = SPOTIFY_UPDATE;
		};
	};
	
	TASK SPOTIFY_UPDATE {
		PRIORITY = 0x02;	/* Mediuem Priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
	
	/* Interruption Handlers */
	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};

	ISR DMA2_Stream1_IRQHandler {
		CATEGORY = 1;
		ENTRY = "DMA2_STREAM1";
		PRIORITY = 2;
	};
	
	ISR DMA2_Stream6_IRQHandler {
		CATEGORY = 1;
		ENTRY = "DMA2_STREAM6";
		PRIORITY = 2;
	};


};
